<?xml version="1.0"?>
<testsuite name="Chrome Headless 102.0.5005.61 (Mac OS 10.15.7)" package="unit" timestamp="2022-06-03T19:12:03" id="0" hostname="Mahilan" tests="154" errors="0" failures="0" time="1.369">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/102.0.5005.61 Safari/537.36"/>
  </properties>
  <testcase name="HeaderInterceptor should not add an Authorization header for regNewUser method" time="0.024" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for getUserDetails method" time="0.006" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should not add an Authorization header for checkLogin method" time="0.003" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for getParticularPatient method" time="0.003" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for diseasesList method" time="0.003" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for scheduleAppointment method" time="0.004" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for getAllPatientsList method" time="0.005" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for getSinglePatientAppointments method" time="0.005" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for updateDetails method" time="0.015" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for deleteAppointment method" time="0.005" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for registerPatient method" time="0.003" classname=".HeaderInterceptor"/>
  <testcase name="HeaderInterceptor should add an Authorization header for requestedAppointments method" time="0.004" classname=".HeaderInterceptor"/>
  <testcase name="AuthGuardService #canActivate should return true for logged in users" time="0.147" classname=".AuthGuardService"/>
  <testcase name="AuthGuardService #canActivate should return false and navigate to login if user is not logged in" time="0.005" classname=".AuthGuardService"/>
  <testcase name="AuthGuardService #canActivate should navigate to login if error occurs" time="0.005" classname=".AuthGuardService"/>
  <testcase name="RegisterNewUserComponent should not display location validation error when the location field is valid" time="0.051" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should enable Create Account button(form valid) when all fields are valid" time="0.021" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should not display email validation error when the email field is valid" time="0.014" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display location validation error when the field kept as null(dirty)" time="0.013" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should not display mobile error when the mobile field is valid" time="0.009" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display maxlength 20 username validation error when the username length greater than 20" time="0.012" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display email pattern validation error" time="0.012" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display no username validation error when the field kept as null(dirty)" time="0.01" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display minlength 3 username validation error when the username length less than 3" time="0.012" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display mobile pattern validation error" time="0.011" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display no password validation error when the field kept as null(dirty)" time="0.011" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display password pattern validation error" time="0.011" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent All validation errors should be hidden and form should be invalid by default" time="0.011" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display minlength 8 password validation error when the password length less than 8" time="0.01" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should not display password error when the password field is valid" time="0.011" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display maxlength 20 password validation error when the password length greater less than 20" time="0.011" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should display username pattern validation error" time="0.009" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should not redirect to login page on occurence of error" time="0.015" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should not display any error when the username field is valid" time="0.009" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should navigate to login when clicked on back button" time="0.013" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent navigate to login page when clicked on back button" time="0.011" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should call signUp method when all fields are valid" time="0.014" classname=".RegisterNewUserComponent"/>
  <testcase name="RegisterNewUserComponent should redirect to login page after successful registration" time="0.016" classname=".RegisterNewUserComponent"/>
  <testcase name="ViewPatientComponent &quot;Book Appointment&quot; button should be disabled after clicking on &quot;Scheduled Appointment&quot;" time="0.019" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call scheduleAppointment method for valid form input&quot;" time="0.024" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent &quot;Scheduled Appointment&quot; button should be disabled after clicking on &quot;Scheduled Appointment&quot;" time="0.012" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should navigate to requested_appointments page after booking an appointment" time="0.018" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call scheduleded method after deleting an appointment" time="0.011" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should get diseasesList when clicking on &quot;Book Appointment&quot;" time="0.01" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should get particular patient appointments when clicking on &quot;scheduled Appointment&quot; button" time="0.01" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call deleteAppointment method of DataService with selected appointment id" time="0.013" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call scheduleAppointment method of DataService with appointment details" time="0.015" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call cancelAppointment method with selected appointment id" time="0.012" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call getParticularPatient method of DataService by default" time="0.01" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent Book Appointment &amp; Scheduled Appointment should be enabled by default" time="0.01" classname=".ViewPatientComponent"/>
  <testcase name="ApiService deleteAppointment should return success status if appointment deleted" time="0.006" classname=".ApiService"/>
  <testcase name="ApiService diseasesList should return the list of diseases" time="0.005" classname=".ApiService"/>
  <testcase name="ApiService regNewUser should return status as success if new user registered successfully" time="0.003" classname=".ApiService"/>
  <testcase name="ApiService requestedAppointments should return all appointments requested by all patients" time="0.003" classname=".ApiService"/>
  <testcase name="ApiService regNewUser should return status as failed if new user is not registered(email is already exists) " time="0.003" classname=".ApiService"/>
  <testcase name="ApiService getUserDetails should return user details" time="0.004" classname=".ApiService"/>
  <testcase name="ApiService getUserDetails should return false status if userId is not valid" time="0.003" classname=".ApiService"/>
  <testcase name="ApiService updateDetails should return new user details after submitting the update" time="0.004" classname=".ApiService"/>
  <testcase name="ApiService should be created" time="0.001" classname=".ApiService"/>
  <testcase name="ApiService registerPatient should return success if POST method success" time="0.007" classname=".ApiService"/>
  <testcase name="ApiService updateDetails should return status 500 if user details not updated" time="0.004" classname=".ApiService"/>
  <testcase name="ApiService registerPatient should add patient details in post request body" time="0.003" classname=".ApiService"/>
  <testcase name="ApiService login should send user credentials in post request body" time="0.004" classname=".ApiService"/>
  <testcase name="ApiService scheduleAppointment should add appointment details in post request body" time="0.003" classname=".ApiService"/>
  <testcase name="ApiService scheduleAppointment should return success message if POST method success" time="0.003" classname=".ApiService"/>
  <testcase name="ApiService login should return user details if auth success" time="0.006" classname=".ApiService"/>
  <testcase name="ApiService getAllPatientsList should return all patient details" time="0.003" classname=".ApiService"/>
  <testcase name="ApiService getSinglePatientAppointments should return requested appointments of particular patient" time="0.002" classname=".ApiService"/>
  <testcase name="ApiService login should return error message if auth fails" time="0.003" classname=".ApiService"/>
  <testcase name="ApiService getParticularPatient should return particular patient details" time="0.003" classname=".ApiService"/>
  <testcase name="AllPatientsListComponent should call view method with the id of selected patient" time="0.008" classname=".AllPatientsListComponent"/>
  <testcase name="AllPatientsListComponent should navigate to patientList page with selected patientId : case 1" time="0.007" classname=".AllPatientsListComponent"/>
  <testcase name="AllPatientsListComponent should call getAllPatientsList method when page loads " time="0.005" classname=".AllPatientsListComponent"/>
  <testcase name="AllPatientsListComponent should navigate to patientList page with selected patientId : case 2" time="0.007" classname=".AllPatientsListComponent"/>
  <testcase name="DataService getSinglePatientAppointments should return appointment details on providing valid appointment id" time="0.004" classname=".DataService"/>
  <testcase name="DataService regNewUser should return success status if user added successfully" time="0.002" classname=".DataService"/>
  <testcase name="DataService doLogOut should store clear localStorage" time="0.002" classname=".DataService"/>
  <testcase name="DataService authenticateUser should return false on occurence of error" time="0.002" classname=".DataService"/>
  <testcase name="DataService regNewUser status as failed if new user is not registered(username or email is already exists)" time="0.001" classname=".DataService"/>
  <testcase name="DataService deleteAppointment should return error on occurence of error" time="0.001" classname=".DataService"/>
  <testcase name="DataService authenticateUser should return true if auth success" time="0.001" classname=".DataService"/>
  <testcase name="DataService deleteAppointment should return success status on providing valid appointment id" time="0.002" classname=".DataService"/>
  <testcase name="DataService getUserDetails should return error on occurence of error" time="0.002" classname=".DataService"/>
  <testcase name="DataService authenticateUser should store id, token in localStorage if auth success" time="0.003" classname=".DataService"/>
  <testcase name="DataService getUserDetails should return user details on providing valid user id" time="0.002" classname=".DataService"/>
  <testcase name="DataService updateProfile should return true on providing valid user details" time="0.002" classname=".DataService"/>
  <testcase name="DataService requestedAppointments should return error on occurence of error" time="0.002" classname=".DataService"/>
  <testcase name="DataService getAllPatientsList should return error on occurence of error" time="0.001" classname=".DataService"/>
  <testcase name="DataService requestedAppointments should return all appointments booked by all patients" time="0.001" classname=".DataService"/>
  <testcase name="DataService registerPatient should return patientDetails  on reporting with valid user id " time="0.002" classname=".DataService"/>
  <testcase name="DataService getAllPatientsList should return user details on providing valid user id" time="0.001" classname=".DataService"/>
  <testcase name="DataService updateProfile should return false on occurence of error" time="0.001" classname=".DataService"/>
  <testcase name="DataService diseasesList should return list of diseases" time="0.001" classname=".DataService"/>
  <testcase name="DataService getParticularPatient should return patient details on providing valid user id" time="0.003" classname=".DataService"/>
  <testcase name="DataService getParticularPatient should return error on occurence of error" time="0.001" classname=".DataService"/>
  <testcase name="DataService registerPatient should return error on occurence of error " time="0.001" classname=".DataService"/>
  <testcase name="DataService diseasesList should return error on occurence of error" time="0.001" classname=".DataService"/>
  <testcase name="DataService scheduleAppointment should return success status on reporting with valid appointmentDetails " time="0.001" classname=".DataService"/>
  <testcase name="DataService scheduleAppointment should return error on occurence of error" time="0.001" classname=".DataService"/>
  <testcase name="DataService getSinglePatientAppointments should return error on occurence of error" time="0.002" classname=".DataService"/>
  <testcase name="AllRequestedAppointmentsComponent should call view method with the id of selected patient" time="0.009" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should navigate to patientList page with selected patientId" time="0.007" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should call requestedAppointments method by default " time="0.006" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should fetch all appointments after cancelling an appointment" time="0.005" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should call cancelAppointment method with the id of selected patient" time="0.005" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should call deleteAppointment method of dataService with the id of selected patient" time="0.005" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="LoginComponent clear localStorage if any, when login" time="0.022" classname=".LoginComponent"/>
  <testcase name="LoginComponent should not display any error when the username field is valid" time="0.009" classname=".LoginComponent"/>
  <testcase name="LoginComponent #dologin should return false if form is invalid" time="0.007" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display username pattern validation error" time="0.009" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display minlength 8 password validation error when the password length less than 8" time="0.011" classname=".LoginComponent"/>
  <testcase name="LoginComponent should not redirect to other pages on occurence of error" time="0.01" classname=".LoginComponent"/>
  <testcase name="LoginComponent should not redirect to other pages on incorrect credentials" time="0.012" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display no password validation error when the field kept as null(dirty)" time="0.009" classname=".LoginComponent"/>
  <testcase name="LoginComponent should navigate to register-new-user page when clicked on &quot;sign up&quot; button" time="0.01" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display no username validation error when the field kept as null(dirty)" time="0.01" classname=".LoginComponent"/>
  <testcase name="LoginComponent should redirect to profile page on correct credentials" time="0.012" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display password pattern validation error" time="0.009" classname=".LoginComponent"/>
  <testcase name="LoginComponent should hide validation messages and call login method from authservice for valid credentials" time="0.008" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display maxlength password validation error when the password length exceeds 20" time="0.01" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display maxlength 20 username validation error when the username length greater than 20" time="0.01" classname=".LoginComponent"/>
  <testcase name="LoginComponent should not display password error when the password field is valid" time="0.008" classname=".LoginComponent"/>
  <testcase name="LoginComponent should enable login button(form valid) when both field are valid" time="0.007" classname=".LoginComponent"/>
  <testcase name="LoginComponent All validation errors should be hidden and form should be invalid by default" time="0.008" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display minlength 3 username validation error when the username length less than 3" time="0.01" classname=".LoginComponent"/>
  <testcase name="ProfileComponent should get getUserDetails method error on occurence of error" time="0.009" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should submit profile changes with validation" time="0.012" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should populate form fields with values on edit profile button click" time="0.011" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent getUserDetails should return error on occurence of error" time="0.009" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should display profile details on load" time="0.009" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should not call getProfileDetails if profile is not updated" time="0.005" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should display profile details on clicking discard button" time="0.01" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should display edit profile form on edit profile button click" time="0.01" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should validate the edit profile form" time="0.012" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent updateProfile should return error on occurence of error" time="0.008" classname=".ProfileComponent"/>
  <testcase name="FormComponent should call submitform method for valid form" time="0.014" classname=".FormComponent"/>
  <testcase name="FormComponent should display no name validation error when the field kept as null(dirty)" time="0.01" classname=".FormComponent"/>
  <testcase name="FormComponent should display name minimum length validation error when the field has less than 3 length" time="0.009" classname=".FormComponent"/>
  <testcase name="FormComponent should display mobile number pattern validation error when the field has value" time="0.011" classname=".FormComponent"/>
  <testcase name="FormComponent gender validation gets pass when clicking female radio button" time="0.009" classname=".FormComponent"/>
  <testcase name="FormComponent should display name maximum length validation error when the field has greater than 20 length" time="0.01" classname=".FormComponent"/>
  <testcase name="FormComponent All validation errors should be hidden and form should be invalid by default" time="0.008" classname=".FormComponent"/>
  <testcase name="FormComponent should navigate to PatientList page after successful registration" time="0.012" classname=".FormComponent"/>
  <testcase name="FormComponent gender validation gets pass when clicking male radio button" time="0.009" classname=".FormComponent"/>
  <testcase name="FormComponent should display no date of birth validation error when the field kept as null(dirty)" time="0.009" classname=".FormComponent"/>
  <testcase name="FormComponent gender field validity" time="0.008" classname=".FormComponent"/>
  <testcase name="FormComponent mobile field validity" time="0.009" classname=".FormComponent"/>
  <testcase name="FormComponent should not display email validation error when the email field is valid" time="0.012" classname=".FormComponent"/>
  <testcase name="FormComponent Date of birth validation gets pass when the field has valid value" time="0.01" classname=".FormComponent"/>
  <testcase name="FormComponent should display email pattern validation error" time="0.011" classname=".FormComponent"/>
  <testcase name="HeaderComponent should get logged user details" time="0.014" classname=".HeaderComponent"/>
  <testcase name="HeaderComponent should get profile details by default(when page loads)" time="0.007" classname=".HeaderComponent"/>
  <testcase name="HeaderComponent should logout when clicked on &quot;logout&quot; menu" time="0.007" classname=".HeaderComponent"/>
  <testcase name="HeaderComponent should get error on occurence of error" time="0.006" classname=".HeaderComponent"/>
  <system-out>
    <![CDATA[Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/register', body: Object{user_email: 'hgjhg@qqu.in', location: 'edttop', user_mobile: 8809871111, password: 'Pjkhkjhjk2!', user_name: 'usffds'}, reportProgress: false, withCredentials: false, responseType: 'json', method: 'POST', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/register'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'not adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/viewprofile/7ae2548c8ad985d89f8f9532', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/viewprofile/7ae2548c8ad985d89f8f9532'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/viewprofile/7ae2548c8ad985d89f8f9532', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/viewprofile/7ae2548c8ad985d89f8f9532'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/signin', body: Object{user_name: 'test@hcs.in', password: 'Xxxxxxx1!'}, reportProgress: false, withCredentials: false, responseType: 'json', method: 'POST', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/signin'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'not adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/patients/view/7ae2548c8ad985d89f8f9532', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/patients/view/7ae2548c8ad985d89f8f9532'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/patients/view/7ae2548c8ad985d89f8f9532', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/patients/view/7ae2548c8ad985d89f8f9532'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/diseases', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/diseases'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/diseases', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/diseases'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/appointment/register', body: Object{disease: 'Asthma', patientId: '5fedcf3f-72aa-48fb-927a-492003779e07', priority: 'Normal', tentativeDate: '2020-05-28'}, reportProgress: false, withCredentials: false, responseType: 'json', method: 'POST', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/appointment/register'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/appointment/register', body: Object{disease: 'Asthma', patientId: '5fedcf3f-72aa-48fb-927a-492003779e07', priority: 'Normal', tentativeDate: '2020-05-28'}, reportProgress: false, withCredentials: false, responseType: 'json', method: 'POST', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/appointment/register'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/patients/list/', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/patients/list/'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/patients/list/', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/patients/list/'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/appointment/list/7ae2548c8ad98jhu8sd89532', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/appointment/list/7ae2548c8ad98jhu8sd89532'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/appointment/list/7ae2548c8ad98jhu8sd89532', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/appointment/list/7ae2548c8ad98jhu8sd89532'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/editprofile/7ae2548c8ad985', body: Object{user_email: 'aquib@abc.com', location: 'shimla', user_mobile: 7576576577}, reportProgress: false, withCredentials: false, responseType: 'json', method: 'PUT', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/editprofile/7ae2548c8ad985'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/editprofile/7ae2548c8ad985', body: Object{user_email: 'aquib@abc.com', location: 'shimla', user_mobile: 7576576577}, reportProgress: false, withCredentials: false, responseType: 'json', method: 'PUT', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/editprofile/7ae2548c8ad985'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/appointment/delete/7ae2548c8ai8g53q8sd89532', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'DELETE', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/appointment/delete/7ae2548c8ai8g53q8sd89532'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/appointment/delete/7ae2548c8ai8g53q8sd89532', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'DELETE', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/appointment/delete/7ae2548c8ai8g53q8sd89532'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/patients/register', body: Object{patient_dob: '2019-08-31', patient_email: 'abcd@def.gh', patient_name: 'fnmae', patient_gender: 'Male', patient_mobile: 9988776655}, reportProgress: false, withCredentials: false, responseType: 'json', method: 'POST', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/patients/register'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/patients/register', body: Object{patient_dob: '2019-08-31', patient_email: 'abcd@def.gh', patient_name: 'fnmae', patient_gender: 'Male', patient_mobile: 9988776655}, reportProgress: false, withCredentials: false, responseType: 'json', method: 'POST', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/patients/register'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/appointment/list', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: null}, urlWithParams: 'http://localhost:8080/appointment/list'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'after adding token'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: HttpRequest{url: 'http://localhost:8080/appointment/list', body: null, reportProgress: false, withCredentials: false, responseType: 'json', method: 'GET', headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: [...], headers: Map{}, lazyInit: HttpHeaders{normalizedNames: ..., lazyUpdate: ..., headers: ...}}, params: HttpParams{updates: null, cloneFrom: null, encoder: HttpUrlEncodingCodec{}, map: Map{}}, urlWithParams: 'http://localhost:8080/appointment/list'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'user not logged in, redirecting to login page'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) WARN: 'Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'user not logged in, redirecting to login page'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) WARN: 'Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'user not logged in, redirecting to login page'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) WARN: 'Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: Object{status: 'success'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: undefined
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: Object{status: 'success'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: undefined
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) ERROR: HttpErrorResponse{headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, status: 401, statusText: 'Invalid username or password', url: null, ok: false, name: 'HttpErrorResponse', message: 'Http failure response for (unknown url): 401 Invalid username or password', error: 'test 401 error'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) ERROR: HttpErrorResponse{headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, status: 401, statusText: 'Invalid username or password', url: null, ok: false, name: 'HttpErrorResponse', message: 'Http failure response for (unknown url): 401 Invalid username or password', error: 'test 401 error'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'login...'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: false
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'login...'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: false
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'login...'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: Object{status: 404, message: 'Not found'}
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'login...'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: false
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'login...'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: true
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'redirecting to /profile page'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) DEBUG: 'login...'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: false
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'done'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'done'
,Chrome Headless 102.0.5005.61 (Mac OS 10.15.7) LOG: 'done'

]]>
  </system-out>
  <system-err/>
</testsuite>